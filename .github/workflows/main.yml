name: Deploy to Azure VM

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend
        dockerfile: ./Backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-backend:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./Frontend
        dockerfile: ./Frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-frontend:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment files
      run: |
        # Create production docker-compose file
        cat > docker-compose.prod.yml << EOF
        version: '3.8'
        services:
          # PostgreSQL Database
          database:
            image: postgres:15-alpine
            container_name: prescription_db
            secretsironment:
              POSTGRES_DB: prescription_system
              POSTGRES_USER: prescription_user
              POSTGRES_PASSWORD: prescription_password
            volumes:
              - postgres_data:/var/lib/postgresql/data
              - ./init-scripts:/docker-entrypoint-initdb.d
            ports:
              - "5432:5432"
            networks:
              - app-network
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U prescription_user -d prescription_system"]
              interval: 30s
              timeout: 10s
              retries: 3
            restart: unless-stopped

          # Spring Boot Backend
          backend:
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-backend:${{ github.sha }}
            container_name: prescription_backend
            secretsironment:
              SPRING_PROFILES_ACTIVE: docker
              SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/prescription_system
              SPRING_DATASOURCE_USERNAME: prescription_user
              SPRING_DATASOURCE_PASSWORD: prescription_password
              SPRING_JPA_HIBERNATE_DDL_AUTO: update
              SPRING_JPA_SHOW_SQL: true
              SERVER_PORT: 8080
            ports:
              - "8080:8080"
            depends_on:
              database:
                condition: service_healthy
            networks:
              - app-network
            healthcheck:
              test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
              interval: 30s
              timeout: 10s
              retries: 3
            restart: unless-stopped

          # React Frontend
          frontend:
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-frontend:${{ github.sha }}
            container_name: prescription_frontend
            ports:
              - "3000:80"
            depends_on:
              - backend
            networks:
              - app-network
            restart: unless-stopped

        volumes:
          postgres_data:

        networks:
          app-network:
            driver: bridge
        EOF

        # Create deployment script
        cat > deploy.sh << EOF
        #!/bin/bash
        set -e

        echo "Starting deployment..."

        # Create application directory if it doesn't exist
        mkdir -p /home/${{ secrets.AZURE_VM_USERNAME }}/prescription-app
        cd /home/${{ secrets.AZURE_VM_USERNAME }}/prescription-app

        # Login to Docker Hub
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

        # Pull latest images
        docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-backend:${{ github.sha }}
        docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-frontend:${{ github.sha }}

        # Stop and remove existing containers
        docker-compose -f docker-compose.prod.yml down || true

        # Start the application
        docker-compose -f docker-compose.prod.yml up -d

        # Wait for services to be healthy
        echo "Waiting for services to start..."
        sleep 30

        # Check if services are running
        docker-compose -f docker-compose.prod.yml ps

        # Test backend health
        for i in {1..10}; do
          if curl -f http://localhost:8080/actuator/health; then
            echo "Backend is healthy!"
            break
          fi
          echo "Waiting for backend to be ready... (attempt \$i/10)"
          sleep 10
        done

        # Test frontend
        if curl -f http://localhost:3000; then
          echo "Frontend is accessible!"
        else
          echo "Warning: Frontend may not be ready yet"
        fi

        echo "Deployment completed successfully!"
        EOF

        chmod +x deploy.sh

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script_stop: true
        script: |
          # Install Docker and Docker Compose if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Create application directory
          mkdir -p /home/${{ secrets.AZURE_VM_USERNAME }}/prescription-app
          cd /home/${{ secrets.AZURE_VM_USERNAME }}/prescription-app

          # Login to Docker Hub
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

          # Pull latest images
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-backend:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-frontend:${{ github.sha }}

          # Create production docker-compose file
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            database:
              image: postgres:15-alpine
              container_name: prescription_db
              secretsironment:
                POSTGRES_DB: prescription_system
                POSTGRES_USER: prescription_user
                POSTGRES_PASSWORD: prescription_password
              volumes:
                - postgres_data:/var/lib/postgresql/data
              ports:
                - "5432:5432"
              networks:
                - app-network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U prescription_user -d prescription_system"]
                interval: 30s
                timeout: 10s
                retries: 3
              restart: unless-stopped

            backend:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-backend:${{ github.sha }}
              container_name: prescription_backend
              secretsironment:
                SPRING_PROFILES_ACTIVE: docker
                SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/prescription_system
                SPRING_DATASOURCE_USERNAME: prescription_user
                SPRING_DATASOURCE_PASSWORD: prescription_password
                SPRING_JPA_HIBERNATE_DDL_AUTO: update
                SPRING_JPA_SHOW_SQL: true
                SERVER_PORT: 8080
              ports:
                - "8080:8080"
              depends_on:
                database:
                  condition: service_healthy
              networks:
                - app-network
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 3
              restart: unless-stopped

            frontend:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/prescription-frontend:${{ github.sha }}
              container_name: prescription_frontend
              ports:
                - "3000:80"
              depends_on:
                - backend
              networks:
                - app-network
              restart: unless-stopped

          volumes:
            postgres_data:

          networks:
            app-network:
              driver: bridge
          EOF

          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down || true

          # Start the application
          docker-compose -f docker-compose.prod.yml up -d

          echo "Deployment completed! Services should be available at:"
          echo "Frontend: http://${{ secrets.AZURE_VM_HOST }}:3000"
          echo "Backend: http://${{ secrets.AZURE_VM_HOST }}:8080"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script: |
          cd /home/${{ secrets.AZURE_VM_USERNAME }}/prescription-app
          
          # Wait for services to be ready
          sleep 45
          
          # Check container status
          echo "=== Container Status ==="
          docker-compose -f docker-compose.prod.yml ps
          
          # Check logs if needed
          echo "=== Recent Backend Logs ==="
          docker-compose -f docker-compose.prod.yml logs --tail=20 backend
          
          echo "=== Recent Frontend Logs ==="
          docker-compose -f docker-compose.prod.yml logs --tail=20 frontend