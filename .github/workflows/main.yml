name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker images
      - name: Build and push Docker images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker compose build
          docker compose push

  deploy-to-azure:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # Write SSH key to a file
      - name: Write SSH key
        run: |
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > HealthSync_key.pem
          chmod 600 HealthSync_key.pem

      # Deploy to Azure VM via SSH
      - name: Deploy to Azure VM
        env:
          AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
          AZURE_VM_HOST: ${{ secrets.AZURE_VM_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no -i HealthSync_key.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
            # Create project directory if it doesn't exist
            mkdir -p ~/prescription-system
            cd ~/prescription-system

            # Create .env file
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env

            # Pull the docker-compose.yml from the repository
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml

            # Log in to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Pull latest images
            docker compose pull

            # Stop existing containers
            docker compose down

            # Start new containers
            docker compose up -d

            # Wait for services to start
            sleep 30

            # Check container status
            docker compose ps

            # Health checks
            if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy"
            else
              echo "‚ùå Backend health check failed"
              docker compose logs backend
              exit 1
            fi

            if curl -f -s http://localhost:3000/ > /dev/null 2>&1; then
              echo "‚úÖ Frontend is healthy"
            else
              echo "‚ùå Frontend health check failed"
              docker compose logs frontend
              exit 1
            fi

            if docker compose exec -T database pg_isready -U prescription_user -d prescription_system > /dev/null 2>&1; then
              echo "‚úÖ Database is healthy"
            else
              echo "‚ùå Database health check failed"
              docker compose logs database
              exit 1
            fi

            # Clean up unused images
            docker image prune -f

            echo "üöÄ Deployment completed!"
            echo "Frontend: http://${{ secrets.AZURE_VM_HOST }}:3000"
            echo "Backend: http://${{ secrets.AZURE_VM_HOST }}:8080"
          EOF