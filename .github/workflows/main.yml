name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Backend Job - Spring Boot
  backend:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for backend changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'Backend/**'
            - 'docker-compose*.yml'

    - name: Set up JDK 17
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      if: steps.changes.outputs.backend == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('Backend/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Create application-test.properties
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd Backend
        mkdir -p src/main/resources
        cat > src/main/resources/application-test.properties << EOF
        spring.application.name=medscribe-backend-test
        spring.datasource.url=jdbc:h2:mem:testdb
        spring.datasource.driver-class-name=org.h2.Driver
        spring.datasource.username=sa
        spring.datasource.password=password
        spring.jpa.hibernate.ddl-auto=create-drop
        spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
        spring.jpa.show-sql=false
        app.jwt.secret=test-secret-key-for-jwt-token-generation-in-test-environment
        app.jwt.expiration=86400000
        server.port=8080
        server.servlet.context-path=/api
        logging.level.root=WARN
        logging.level.com.medscribe=INFO
        EOF

    - name: Add H2 dependency for tests
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd Backend
        # Add H2 dependency to pom.xml for testing
        sed -i '/<\/dependencies>/i\
        \t\t<!-- H2 Database for Testing -->\
        \t\t<dependency>\
        \t\t\t<groupId>com.h2database</groupId>\
        \t\t\t<artifactId>h2</artifactId>\
        \t\t\t<scope>test</scope>\
        \t\t</dependency>' pom.xml

    - name: Run tests
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd Backend
        mvn clean test -Dspring.profiles.active=test
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Build backend
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd Backend
        mvn clean package -DskipTests

    - name: Upload backend artifacts
      if: steps.changes.outputs.backend == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: Backend/target/*.jar
        retention-days: 1

  # Frontend Job - Vite React
  frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for frontend changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'Frontend/**'
            - 'docker-compose*.yml'

    - name: Set up Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json

    - name: Install dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd Frontend
        npm ci

    - name: Type checking
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd Frontend
        npx tsc --noEmit
      continue-on-error: true

    - name: Build frontend
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd Frontend
        npm run build


    - name: Upload build artifacts
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: Frontend/dist/
        retention-days: 1

  # Docker Build Job
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      if: needs.backend.outputs.backend-changed == 'true'
      run: |
        cd Backend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/prescription-backend:${{ github.sha }} .
        docker build -t ${{ secrets.DOCKER_USERNAME }}/prescription-backend:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/prescription-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/prescription-backend:latest

    - name: Build and push frontend image
      if: needs.frontend.outputs.frontend-changed == 'true'
      run: |
        cd Frontend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/prescription-frontend:${{ github.sha }} .
        docker build -t ${{ secrets.DOCKER_USERNAME }}/prescription-frontend:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/prescription-frontend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/prescription-frontend:latest

  # Deploy to Azure VM
  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 74.225.140.65 >> ~/.ssh/known_hosts


    - name: Deploy to Azure VM
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Update system
        sudo apt-get update
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
        fi
        
        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Create application directory
        mkdir -p ~/prescription-app
        cd ~/prescription-app
        
        # Stop existing containers if running
        if [ -f docker-compose.prod.yml ]; then
            echo "Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down || true
        fi
        
        # Clean up old images
        docker system prune -f || true
        
        echo "✅ Deployment preparation completed"
        EOF
        
        # Copy and execute deployment script
        scp deploy.sh azureuser@74.225.140.65:~/
        ssh azureuser@74.225.140.65 'chmod +x ~/deploy.sh && ~/deploy.sh'
        
        # Copy docker-compose file
        scp docker-compose.prod.yml azureuser@74.225.140.65:~/prescription-app/
        
        # Create environment file
        ssh azureuser@74.225.140.65 << 'EOF'
        cd ~/prescription-app
        cat > .env << 'ENVEOF'
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
        ENVEOF
        EOF
        
        # Update docker-compose to use Docker Hub images if built
        if [[ "${{ needs.backend.outputs.backend-changed }}" == "true" || "${{ needs.frontend.outputs.frontend-changed }}" == "true" ]]; then
          ssh azureuser@74.225.140.65 << 'EOF'
          cd ~/prescription-app
          # Update docker-compose to use pushed images
          sed -i 's|build:|#build:|g' docker-compose.prod.yml
          sed -i 's|context: ./Backend|#context: ./Backend|g' docker-compose.prod.yml
          sed -i 's|dockerfile: Dockerfile|#dockerfile: Dockerfile|g' docker-compose.prod.yml
          sed -i 's|context: ./Frontend|#context: ./Frontend|g' docker-compose.prod.yml
          
          # Add image references
          sed -i '/container_name: prescription_backend/a\    image: ${{ secrets.DOCKER_USERNAME }}/prescription-backend:latest' docker-compose.prod.yml
          sed -i '/container_name: prescription_frontend/a\    image: ${{ secrets.DOCKER_USERNAME }}/prescription-frontend:latest' docker-compose.prod.yml
        EOF
        fi
        
        # Start the application
        ssh azureuser@74.225.140.65 << 'EOF'
        cd ~/prescription-app
        echo "🚀 Starting application..."
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        echo "📊 Checking service status..."
        docker-compose -f docker-compose.prod.yml ps
        
        echo "🔍 Checking service health..."
        docker-compose -f docker-compose.prod.yml logs --tail=20
        
        echo "✅ Deployment completed successfully!"
        echo "🌐 Application should be available at: http://74.225.140.65"
        EOF


    # - name: Verify deployment
    #   run: |
    #     echo "🔍 Verifying deployment..."
    #     sleep 10
        
    #     # Check if the application is responding
    #     if curl -f http://74.225.140.65 > /dev/null 2>&1; then
    #       echo "✅ Application is responding successfully!"
    #     else
    #       echo "❌ Application health check failed"
    #       exit 1
    #     fi

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
        rm -f deploy.sh
