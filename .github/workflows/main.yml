name: Deploy to Azure VM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Get the code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Java 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run tests
      run: |
        cd Backend
        # mvn clean test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
        SPRING_DATASOURCE_USERNAME: sa
        SPRING_DATASOURCE_PASSWORD: password
        SPRING_DATASOURCE_DRIVER: org.h2.Driver
        SPRING_DATASOURCE_DIALECT: org.hibernate.dialect.H2Dialect
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
        SPRING_JPA_SHOW_SQL: false
        FIREBASE_KEY: '${{ secrets.FIREBASE_KEY }}$'
        FIREBASE_STORAGE_BUCKET: test-bucket
        JWT_SECRET: ${{ secrets.secrets.JWT_SECRET }}

    # 3. Build backend JAR
    - name: Build backend JAR
      run: |
        cd Backend
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        ls -la target/


    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd Frontend
        npm ci
        # npm test

     # 4. Login to Docker Hub
    - name: Login to Docker Hub
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    # 5. Build and push backend
    - name: Build and push backend
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/prescription-backend:latest ./Backend
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/prescription-backend:latest

    # 6. Build and push frontend  
    - name: Build and push frontend
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/prescription-frontend:latest ./Frontend
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/prescription-frontend:latest

    # 7. Deploy to VM
    - name: Deploy to VM
      run: |
        # Create SSH key
        echo "${{ secrets.AZURE_VM_SSH_KEY }}" > key.pem
        chmod 600 key.pem
        
        # Create docker-compose content
        cat > docker-compose.yml << 'COMPOSE_EOF'
        version: '3.8'
        services:
          database:
            image: postgres:15-alpine
            container_name: prescription_db
            environment:
              POSTGRES_DB: prescription_system
              POSTGRES_USER: ${{ secrets.DB_USERNAME }}
              POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
            volumes:
              - postgres_data:/var/lib/postgresql/data
            ports:
              - "5432:5432"
            networks:
              - app-network
            restart: unless-stopped

          backend:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/prescription-backend:latest
            container_name: prescription_backend
            environment:
              SPRING_PROFILES_ACTIVE: docker
              SPRING_DATASOURCE_URL: '${{ secrets.DB_URL }}'
              SPRING_DATASOURCE_USERNAME: prescription_user
              SPRING_DATASOURCE_PASSWORD: prescription_password
              SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
              SPRING_JPA_SHOW_SQL: false
              SERVER_PORT: 8080
              FIREBASE_KEY: '${{ secrets.FIREBASE_KEY }}'
              JWT_SECRET: ${{ secrets.JWT_SECRET }}
              SPRING_DATASOURCE_DRIVER: ${{ secrets.DB_DRIVER }}
              SPRING_DATASOURCE_DIALECT: ${{ secrets.DB_DIALECT }}
              FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
              AZURE_VM_HOST: ${{ secrets.AZURE_VM_HOST }}
              CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://74.225.140.65:3000,http://${{ secrets.AZURE_VM_HOST }}:3000,*"
            ports:
              - "8080:8080"
            depends_on:
              - database
            networks:
              - app-network
            restart: unless-stopped

          frontend:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/prescription-frontend:latest
            container_name: prescription_frontend
            ports:
              - "3000:80"
            depends_on:
              - backend
            networks:
              - app-network
            restart: unless-stopped

        volumes:
          postgres_data:

        networks:
          app-network:
            driver: bridge
        COMPOSE_EOF
        
        # SSH and deploy
        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} << 'SSH_EOF'
          # Create app directory
          mkdir -p ~/prescription-app
          cd ~/prescription-app
          
          # Login to Docker Hub on remote server
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        SSH_EOF
        
        # Copy docker-compose file to remote server
        scp -i key.pem -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:~/prescription-app/
        
        # Deploy on remote server
        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} << 'DEPLOY_EOF'
          cd ~/prescription-app
          
          # Pull latest images and restart
          docker-compose pull
          docker-compose down
          docker-compose up -d
          
          # Quick status check
          sleep 15
          docker-compose ps
          
          echo "ðŸš€ Deployment completed!"
          echo "Frontend: http://${{ secrets.AZURE_VM_HOST }}:3000"
          echo "Backend: http://${{ secrets.AZURE_VM_HOST }}:8080"
        DEPLOY_EOF
        
        # Clean up
        rm -f key.pem docker-compose.yml
